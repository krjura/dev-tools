buildscript {

    ext {
        kotlinVersion = '1.6.0'
        springBootVersion = '2.5.7'
        jibVersion = '3.1.4'
    }

    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jibVersion}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-kapt'
apply plugin: "com.google.cloud.tools.jib"

group = 'org.krjura.devtools'
version = '1.1'

ext {
    customVersion = buildVersionCalculator()
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // javax.validation
    implementation 'org.hibernate:hibernate-validator:6.0.13.Final'

    // micrometer
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // annotation processors
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-autoconfigure-processor'

    // logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.slf4j:log4j-over-slf4j'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '16'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '16'
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
        exceptionFormat 'FULL'
        showExceptions true
        showCauses true
        showStackTraces true

        info {
            events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
            exceptionFormat 'FULL'
        }

        debug {
            events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
            exceptionFormat 'FULL'
        }
    }
}

// Custom scripts
def buildVersionCalculator() {

    println 'calculating build version'

    def buildNumber = System.env.CI_PIPELINE_IID;

    if(buildNumber == null) {
        println 'CI_PIPELINE_IID not set failing back to default version';
        return project.version;
    }

    def updatedVersion = version + "." + buildNumber;
    println "version is now ${updatedVersion}";

    return updatedVersion;
}

jib {
    containerizingMode = 'packaged'
    from {
        image = 'docker.io/krjura/java-17-exec-env:1.1.0'
        auth {
            username = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_USERNAME', 'none')
            password = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_PASSWORD', 'none')
        }
    }
    to {
        image = "docker.io/krjura/dev-tools:${project.ext.customVersion}"
        auth {
            username = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_USERNAME', 'none')
            password = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_PASSWORD', 'none')
        }
    }
    container {
        appRoot = '/opt/app'
        creationTime = 'EPOCH'
        filesModificationTime = 'EPOCH_PLUS_SECOND'
        format = 'Docker'
        jvmFlags = ['-Xdebug']
        mainClass = 'org.krjura.devtools.DevToolsRootKt'
        user = '1000'
        workingDirectory = '/opt/app'
    }
    extraDirectories {
        paths {
            path {
                from = file('frontend/angular-web/dist/angular-web')
                into = '/opt/app/web-resources'
            }
        }
    }
}

