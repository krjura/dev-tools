plugins {
    id 'java'

    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    id 'com.google.cloud.tools.jib' version '3.1.4'
    id 'org.sonarqube' version '3.3'

    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.10'
    id 'org.jetbrains.kotlin.kapt' version '1.6.10'
}

apply plugin: 'jacoco'

group = 'org.krjura.devtools'
version = '1.2'

ext {
    customVersion = buildVersionCalculator()
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // javax.validation
    implementation 'org.hibernate:hibernate-validator:7.0.1.Final'

    // micrometer
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // annotation processors
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-autoconfigure-processor'

    // logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.slf4j:log4j-over-slf4j'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
        exceptionFormat 'FULL'
        showExceptions true
        showCauses true
        showStackTraces true

        info {
            events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
            exceptionFormat 'FULL'
        }

        debug {
            events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT'
            exceptionFormat 'FULL'
        }
    }

    finalizedBy jacocoTestReport
}

// Custom scripts
def buildVersionCalculator() {

    println 'calculating build version'

    def buildNumber = System.env.CI_PIPELINE_IID;

    if(buildNumber == null) {
        println 'CI_PIPELINE_IID not set failing back to default version';
        return project.version;
    }

    def updatedVersion = version + "." + buildNumber;
    println "version is now ${updatedVersion}";

    return updatedVersion;
}

jib {
    containerizingMode = 'packaged'
    from {
        image = 'docker.io/krjura/java-17-exec-env:1.1.0'
        auth {
            username = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_USERNAME', 'none')
            password = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_PASSWORD', 'none')
        }
    }
    to {
        image = "docker.io/krjura/dev-tools:${project.ext.customVersion}"
        auth {
            username = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_USERNAME', 'none')
            password = System.getenv().getOrDefault('HUB_DOCKER_KRJURA_PASSWORD', 'none')
        }
    }
    container {
        appRoot = '/opt/app'
        creationTime = 'EPOCH'
        filesModificationTime = 'EPOCH_PLUS_SECOND'
        format = 'Docker'
        jvmFlags = ['-Xdebug']
        mainClass = 'org.krjura.devtools.DevToolsRootKt'
        user = '1000'
        workingDirectory = '/opt/app'
    }
    extraDirectories {
        paths {
            path {
                from = file('frontend/angular-web/dist/angular-web')
                into = '/opt/app/web-resources'
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', System.getenv('SONAR_HOST_URL')
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        property 'sonar.organization', 'm5828'
        property 'sonar.projectName', 'dev-tools'
        property 'sonar.projectKey', 'm5828_dev-tools'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectVersion', project.ext.customVersion
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.dynamicAnalysis', 'reuseReports'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/*.xml'
        property 'sonar.language', 'kotlin'
    }
}

