buildscript {

    ext {
        kotlinVersion = '1.4.30'
        springBootVersion = '2.4.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'kotlin-kapt'

group = 'org.krjura.devtools'
version = '1.0'

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // javax.validation
    implementation 'org.hibernate:hibernate-validator:6.0.13.Final'

    // micrometer
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // annotation processors
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-autoconfigure-processor'

    // logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.slf4j:log4j-over-slf4j'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '15'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '15'
    }
}

test {
    useJUnitPlatform()
}

jar {
    enabled = true
}

bootJar {
    classifier = 'boot'
    archiveName = 'devtools-root-boot.jar'
}

// Custom scripts
def buildVersionCalculator() {

    println "calculating build version"

    def buildNumber = System.env.BUILD_NUMBER;

    if(buildNumber == null) {
        println "BUILD_NUMBER not set failing back to default version";
        return project.version;
    }

    if(!buildNumber.isNumber() ) {
        println "BUILD_NUMBER ${System.env.BUILD_NUMBER} is not a number";
        return project.version;
    }

    buildNumber = buildNumber as int;

    if(buildNumber <= 0) {
        println("BUILD_NUMBER must be larger then 0 but was ${buildNumber}");
        return project.version;
    }

    def updatedVersion = version + "." + buildNumber;
    println "version is now ${updatedVersion}";

    return updatedVersion;
}

application {
    mainClass = 'org.krjura.devtools.DevToolsRoot'
}

